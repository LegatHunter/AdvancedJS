// Урок 1. Коллекции и итераторы. Модули
// Формат сдачи: ссылка на репозиторий.


// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)


const musicCollection = {
  collection: [
    {
      title: "Альбом 1",
      artist: "Исполнитель 1",
      year: "2000"
    },
    {
      title: "Альбом 2",
      artist: "Исполнитель 2",
      year: "1990"
    },
    {
      title: "Альбом 3",
      artist: "Исполнитель 3",
      year: "1980"
    },
  ],
  [Symbol.iterator]() {
    let i = 0;
    return {
      next: () => {
        if (i < this.collection.length) {
          return {
            value: this.collection[i++],
            done: false
          };
        } else {
          return {
            done: true
          };
        }
      }
    };
  }
};

for (const album of musicCollection) {
  console.log(`${album.title} - ${album.artist} (${album.year})`);
}





// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const dishes = new Map([
  ["Пицца 'Маргарита'", "Виктор"],
  ["Пицца 'Пепперони'", "Виктор"],
  ["Суши 'Филадельфия'", "Ольга"],
  ["Суши 'Калифорния'", "Ольга"],
  ["Тирамису", "Дмитрий"],
  ["Чизкейк", "Дмитрий"]
]);

const orders = new Map();

function addOrder(client, dish) {
  if (!orders.has(client)) {
    orders.set(client, []);
  }
  orders.get(client).push(dish);
}

addOrder({ name: "Алексей" }, "Пицца 'Пепперони'");
addOrder({ name: "Алексей" }, "Тирамису");
addOrder({ name: "Мария" }, "Суши 'Калифорния'");
addOrder({ name: "Мария" }, "Пицца 'Маргарита'");
addOrder({ name: "Ирина" }, "Чизкейк");

function printOrders() {
  orders.forEach((dishesList, client) => {
    console.log(`Клиент ${client.name} заказал:`);
    dishesList.forEach(dish => {
      console.log(`- ${dish} (повар: ${dishes.get(dish)})`);
    });
  });
}

printOrders();